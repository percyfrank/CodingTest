'''
===========================================================================================
입력 조건
-------------------------------------------------------------------------------------------
* 첫째 줄에 맵의 세로 크기 N과 가로 크기 M을 공백으로 구분하여 입력한다. (3 <= N,M <= 50)
 
* 둘째 줄에 게임 캐릭터가 있는 칸의 좌표 (A,B)와 바라보는 방향 d가 각각 서로 공백으로
구분하여 주어진다. 방향 d의 값으로는 다음과 같이 4가지가 존재한다.

- 0 : 북쪽
- 1 : 동쪽
- 2 : 남쪽
- 3 : 서쪽

* 셋째 줄부터 맵이 육지인지 바다인지에 대한 정보가 주어진다. N개의 줄에 맵의 상태가 
북쪽부터 남쪽 순서대로, 각 줄의 데이터는 서쪽부터 동쪽 순서대로 주어진다. 맵의 외곽은 
항상 바다로 되어 있다.

- 0 : 육지
- 1 : 바다

* 처음에 게임 캐릭터가 위치한 칸의 상태는 항상 육지이다.
===========================================================================================
출력 조건
-------------------------------------------------------------------------------------------
* 첫째 줄에 이동을 마친 후 캐릭터가 방문한 칸의 수를 출력한다.
===========================================================================================
'''

n,m = map(int,input().split())
x,y,direction = map(int,input().split())

# 초기 맵 생성(0으로 초기화)
array = [[0]*m for _ in range(n)]

# 맵 입력받기
for i in range(n):
    array[i] = list(map(int,input().split()))

# 방문 처리는 9
array[x][y] = 9

# 북, 동, 남, 서 방향 정의    
dx = [-1,0,1,0]
dy = [0,1,0,-1]

# 왼쪽 회전 함수
def turn_left():
    global direction
    direction -= 1
    if direction == -1:
        direction = 3

count = 1
while True:
    # 왼쪽으로 회전
    turn_left()
    x += dx[direction]
    y += dy[direction]
    # 회전 후 정면에 가보지 않은 칸이 존재하면 이동
    if array[x][y] == 0:
        array[x][y] = 9
        count += 1
        continue
    # 회전 후 정면에 가본 칸이거나 바다인 경우
    else:
        x -= dx[direction]
        y -= dy[direction]
    # 네 방향 모두 막혀 있고, 뒤쪽 방향이 바다는 아닐 경우엔 한 칸 뒤로 이동
    if array[x-1][y] != 0 and array[x][y-1] != 0 and array[x+1][y] != 0 and array[x][y+1] != 0:
        x -= dx[direction]
        y -= dy[direction]
        # 네 방향 모두 막혀 있고, 뒤가 바다로 막혀 있는 경우
        if array[x-1][y] == 1 or array[x][y-1] == 1 or array[x+1][y] == 1 or array[x][y+1] == 1:
            break;
        
print(count)
        
    

        
        